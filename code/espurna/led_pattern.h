/* Generated by re2c 2.0.3 on Thu Apr 15 11:19:09 2021 */
#line 1 "led_pattern.h.in"
/*

LED MODULE

Copyright (C) 2020-2021 by Maxim Prokhorov <prokhorov dot max at outlook dot com>

*/

#pragma once

#include "led.h"

#include <cstring>

// Scans input string with format
// '<on1>,<off1>,<repeats1> <on2>,<off2>,<repeats2> ...'
// And returns a list of Delay objects for the pattern

struct LedPattern {
    using Delays = std::vector<LedDelay>;

    LedPattern() = default;

    LedPattern(LedPattern&&) = default;
    LedPattern& operator=(LedPattern&&) = default;

    explicit LedPattern(Delays&& delays_) :
        delays(std::move(delays_)),
        clock_last(ESP.getCycleCount()),
        clock_delay(delays.size() ? delays.back().on() : 0)
    {}

    void start() {
        clock_last = ESP.getCycleCount();
        clock_delay = 0;
        queue = { delays.rbegin(), delays.rend() };
    }

    void reset() {
        queue.clear();
    }

    bool ready() const {
        return delays.size() > 0;
    }

    bool started() const {
        return queue.size() > 0;
    }

    Delays delays;
    Delays queue;
    unsigned long clock_last;
    unsigned long clock_delay;
};

LedPattern _ledLoadPattern(const char* input) {
    char buffer[16];

    const char* d1;
    const char* d2;
    const char* d3;

    const char* p = input;
    const char* marker;

    LedPattern::Delays delays;

loop:
const char *yyt1;const char *yyt2;const char *yyt3;

#line 75 "<stdout>"
	{
		char yych;
		yych = (char)*p;
		switch (yych) {
		case '\t':
		case ' ': goto yy4;
		case '0' ... '9':
			yyt1 = p;
			goto yy7;
		default: goto yy2;
		}
yy2:
		++p;
yy3:
#line 83 "led_pattern.h.in"
		{ goto out; }
#line 92 "<stdout>"
yy4:
		yych = (char)*++p;
		switch (yych) {
		case '\t':
		case ' ': goto yy4;
		default: goto yy6;
		}
yy6:
#line 84 "led_pattern.h.in"
		{ goto loop; }
#line 103 "<stdout>"
yy7:
		yych = (char)*(marker = ++p);
		switch (yych) {
		case ',': goto yy8;
		case '0' ... '9': goto yy10;
		default: goto yy3;
		}
yy8:
		yych = (char)*++p;
		switch (yych) {
		case '0' ... '9':
			yyt2 = p;
			goto yy12;
		default: goto yy9;
		}
yy9:
		p = marker;
		goto yy3;
yy10:
		yych = (char)*++p;
		switch (yych) {
		case ',': goto yy8;
		case '0' ... '9': goto yy10;
		default: goto yy9;
		}
yy12:
		yych = (char)*++p;
		switch (yych) {
		case ',': goto yy14;
		case '0' ... '9': goto yy12;
		default: goto yy9;
		}
yy14:
		yych = (char)*++p;
		switch (yych) {
		case '0' ... '9':
			yyt3 = p;
			goto yy15;
		default: goto yy9;
		}
yy15:
		yych = (char)*++p;
		switch (yych) {
		case '0' ... '9': goto yy15;
		default: goto yy17;
		}
yy17:
		d1 = yyt1;
		d2 = yyt2;
		d3 = yyt3;
#line 85 "led_pattern.h.in"
		{
            unsigned long on;
            unsigned long off;
            unsigned char repeats;

            memcpy(buffer, d1, int(d2 - d1));
            buffer[int(d2 - d1 - 1)] = '\0';
            on = strtoul(buffer, nullptr, 10);

            memcpy(buffer, d2, int(d3 - d2));
            buffer[int(d3 - d2 - 1)] = '\0';
            off = strtoul(buffer, nullptr, 10);

            memcpy(buffer, d3, int(p - d3));
            buffer[int(p - d3)] = '\0';
            repeats = strtoul(buffer, nullptr, 10);

            delays.emplace_back(on, off, repeats);

            goto loop;
        }
#line 176 "<stdout>"
	}
#line 106 "led_pattern.h.in"


out:
    return LedPattern(std::move(delays));
}

LedPattern _ledLoadPattern(const String& pattern) {
    return _ledLoadPattern(pattern.c_str());
}
